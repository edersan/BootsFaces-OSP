/**
 *  Copyright 2014-2016 by Riccardo Massera (TheCoder4.Eu) and Stephan Rauh (http://www.beyondjava.net).
 *
 *  This file is part of BootsFaces.
 *
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

package net.bootsfaces.component.radiobutton;

import java.io.IOException;
import java.util.List;

import javax.faces.FacesException;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.context.ResponseWriter;
import javax.faces.model.SelectItem;
import javax.faces.render.FacesRenderer;

import net.bootsfaces.beans.ELTools;
import net.bootsfaces.component.SelectItemUtils;
import net.bootsfaces.component.inputText.InputTextRenderer;
import net.bootsfaces.render.Responsive;
import net.bootsfaces.render.Tooltip;

/** This class generates the HTML code of &lt;b:radiobutton /&gt;. */
@FacesRenderer(componentFamily = "net.bootsfaces.component", rendererType = "net.bootsfaces.component.radiobutton.Radiobutton")
public class RadiobuttonRenderer extends InputTextRenderer {

	/**
	 * This methods generates the HTML code of the current b:radiobutton.
	* <code>encodeBegin</code> generates the start of the component. After the, the JSF framework calls <code>encodeChildren()</code>
	* to generate the HTML code between the beginning and the end of the component. For instance, in the case of a panel component
	* the content of the panel is generated by <code>encodeChildren()</code>. After that, <code>encodeEnd()</code> is called
	* to generate the rest of the HTML code.
	 * @param context the FacesContext.
	 * @param component the current b:radiobutton.
	 * @throws IOException thrown if something goes wrong when writing the HTML code.
	 */
	@Override
	public void encodeBegin(FacesContext context, UIComponent component) throws IOException {
	    if (!component.isRendered()) {
	        return;
	    }
		Radiobutton radiobutton = (Radiobutton) component;
		ResponseWriter rw = context.getResponseWriter();
		String clientId = radiobutton.getClientId();


		String propertyName = radiobutton.getValueExpression("value").getExpressionString();
		Object beanValue = ELTools.evalAsObject(propertyName);
		if (propertyName.startsWith("#{") && propertyName.endsWith("}")) {
			propertyName=propertyName.substring(2, propertyName.length()-1);
		} else {
			throw new FacesException("The value attribute of a radiobutton must be an EL expression.");
		}
		RadioButtonInternalStateBean state = (RadioButtonInternalStateBean) ELTools.evalAsObject("#{radioButtonInternalStateBean}");
		String key = "BF_generated_radiobuttonfield_"+propertyName;
		if (!state.inputHasAlreadyBeenRendered(key)) {
			super.encodeEnd(context, component);
//			rw.startElement("input", component);
//			rw.writeAttribute("name", propertyName, null);
//			rw.endElement("input");
		}

		List<SelectItem> options = SelectItemUtils.collectOptions(context, component);
		if (options.size()>0) {
			// traditional JSF approach using f:selectItem[s]
			int counter=0;
			for (SelectItem option:options) {
				generateASingleRadioButton(context, component, radiobutton, rw, propertyName, beanValue,
						option.getValue(),
						option.getLabel(), clientId+(counter++));

			}

		} else {
			// BootsFaces approach using b:radioButtons for each radiobutton item
			String itemValue = radiobutton.getItemValue();
			String itemLabel = radiobutton.getItemLabel();
			String itemId = clientId;

			generateASingleRadioButton(context, component, radiobutton, rw, propertyName, beanValue, itemValue,
					itemLabel, itemId);
		}
	}

	private void generateASingleRadioButton(FacesContext context, UIComponent component, Radiobutton radiobutton,
			ResponseWriter rw, String propertyName, Object beanValue, Object itemValue, String itemLabel, String itemId)
			throws IOException {
		rw.startElement("div", radiobutton);
		rw.writeAttribute("id", itemId, null);
		String styleClass=Responsive.getResponsiveStyleClass(radiobutton, false);
		String styleClass2 = radiobutton.getStyleClass();
		if (styleClass2!=null) {
			styleClass = styleClass2 + styleClass;
		}
		styleClass=styleClass.trim() + " radio";
		rw.writeAttribute("class", styleClass, null);
		writeAttribute(rw, "style", radiobutton.getStyle());
		Tooltip.generateTooltip(context, radiobutton, rw);
		rw.startElement("label", component);
		rw.writeAttribute("onclick", "$('[name=\"input_" + propertyName + "\"]').val('" + itemValue + "')", null);
		rw.startElement("input", component);
		rw.writeAttribute("type", "radio", null);
		rw.writeAttribute("name", propertyName.replace('.','_'), null);
		if (beanValue!=null) {
			if (beanValue.toString().equals(itemValue)) {
				rw.writeAttribute("checked", "checked", null);
			}
		} else if (itemValue==null){
			rw.writeAttribute("checked", "checked", null);
		}
		rw.endElement("input");
		if (itemLabel!=null) {
			rw.writeText(itemLabel, null);
		}
		encodeChildren(context, component);
		rw.endElement("label");
		rw.endElement("div");
		Tooltip.activateTooltips(context, component, itemId);
	}

	/**
	 * This methods generates the HTML code of the current b:radiobutton.
	* <code>encodeBegin</code> generates the start of the component. After the, the JSF framework calls <code>encodeChildren()</code>
	* to generate the HTML code between the beginning and the end of the component. For instance, in the case of a panel component
	* the content of the panel is generated by <code>encodeChildren()</code>. After that, <code>encodeEnd()</code> is called
	* to generate the rest of the HTML code.
	 * @param context the FacesContext.
	 * @param component the current b:radiobutton.
	 * @throws IOException thrown if something goes wrong when writing the HTML code.
	 */
	@Override
	public void encodeEnd(FacesContext context, UIComponent component) throws IOException {
		// already rendered in encodeBegin
	}

}
